import React, { useState, useEffect } from 'react';
import { Bar, Doughnut } from 'react-chartjs-2';
import { Chart as ChartJS, CategoryScale, LinearScale, BarElement, Title, Tooltip, Legend, ArcElement } from 'chart.js';
import { ComposableMap, Geographies, Geography } from 'react-simple-maps';
import { scaleQuantize } from 'd3-scale';
import usStatesTopo from './usStatesTopo.json'; // Ensure this path is correct

ChartJS.register(CategoryScale, LinearScale, BarElement, Title, Tooltip, Legend, ArcElement);

const data = {
  labels: Array.from({ length: 15 }, (_, i) => `Product ${i + 1}`),
  datasets: [
    {
      data: Array.from({ length: 15 }, (_, i) => Math.floor(Math.random() * 30) + 1),
      backgroundColor: Array.from({ length: 15 }, (_, i) =>
        i % 2 === 0 ? 'rgba(255, 99, 132, 0.5)' : 'rgba(255, 159, 64, 0.5)'
      ),
    },
  ],
};

const genderData = {
  labels: ['MALE', 'FEMALE', 'OTHER'],
  datasets: [
    {
      data: [58, 35, 7],
      backgroundColor: ['#FF0000', '#FFEB3B', '#FFECB3'],
    },
  ],
};

const options = {
  responsive: true,
  plugins: {
    legend: {
      display: false,
    },
    title: {
      display: true,
      text: 'Product Sales Data',
    },
  },
};

const genderOptions = {
  responsive: true,
  plugins: {
    legend: {
      position: 'right',
    },
    title: {
      display: true,
      text: 'Gender Representation',
    },
  },
};

const stateProductData = {
  "AL": 60, "AK": 30, "AZ": 88, "AR": 55, "CA": 150,
  "CO": 92, "CT": 70, "DE": 45, "FL": 120, "GA": 95,
  "HI": 40, "ID": 52, "IL": 90, "IN": 75, "IA": 65,
  "KS": 60, "KY": 70, "LA": 80, "ME": 50, "MD": 85,
  "MA": 100, "MI": 75, "MN": 85, "MS": 55, "MO": 80,
  "MT": 45, "NE": 50, "NV": 55, "NH": 60, "NJ": 110,
  "NM": 49, "NY": 160, "NC": 65, "ND": 40, "OH": 70,
  "OK": 65, "OR": 68, "PA": 85, "RI": 55, "SC": 65,
  "SD": 40, "TN": 75, "TX": 130, "UT": 61, "VT": 45,
  "VA": 80, "WA": 80, "WV": 50, "WI": 75, "WY": 40
};

const colorScale = scaleQuantize()
  .domain([0, 160])
  .range([
    "#ffedea",
    "#ffcec5",
    "#ffad9f",
    "#ff8a75",
    "#ff5533",
    "#e2492d",
    "#be3d26",
    "#9a311f",
    "#782618"
  ]);

const Popup = ({ data, onClose }) => {
  return (
    <div style={{ position: 'absolute', top: '20%', left: '50%', transform: 'translate(-50%, -50%)', backgroundColor: 'white', padding: '20px', border: '1px solid black', zIndex: 100 }}>
      <h1>Details for {data.label}</h1>
      <p>Data Value: {data.value}</p>
      <button onClick={onClose}>Close</button>
    </div>
  );
};

const Dashboard = () => {
  const [year, setYear] = useState('2023');
  const [popupInfo, setPopupInfo] = useState(null);
  const [tooltipContent, setTooltipContent] = useState('');
  const [tooltipPosition, setTooltipPosition] = useState({ x: 0, y: 0 });

  const handleYearChange = (e) => {
    setYear(e.target.value);
  };

  const closePopup = () => {
    setPopupInfo(null);
  };

  return (
    <div style={{ display: 'grid', gridTemplateColumns: '1fr 1fr', gridTemplateRows: '1fr 1fr', gap: '20px', width: '100vw', height: '100vh', padding: '20px', boxSizing: 'border-box' }}>
      {popupInfo && <Popup data={popupInfo} onClose={closePopup} />}

      {/* Combined Bar Chart */}
      <div style={{ gridColumn: 'span 2', boxShadow: '0 4px 8px rgba(0, 0, 0, 0.1)', padding: '20px', borderRadius: '8px', display: 'flex', flexDirection: 'column', justifyContent: 'center', alignItems: 'center' }}>
        <div style={{ marginBottom: '10px' }}>
          <label>
            Year:
            <select value={year} onChange={handleYearChange} style={{ marginLeft: '10px' }}>
              <option value="2023">2023</option>
              <option value="2022">2022</option>
              <option value="2021">2021</option>
            </select>
          </label>
        </div>
        <div style={{ width: '100%', height: '100%' }}>
          <Bar data={data} options={options} />
        </div>
      </div>

      {/* Heatmap */}
      <div style={{ boxShadow: '0 4px 8px rgba(0, 0, 0, 0.1)', padding: '20px', borderRadius: '8px', display: 'flex', flexDirection: 'column', justifyContent: 'center', alignItems: 'center' }}>
        <div style={{ width: '100%', height: '100%' }}>
          <h2 style={{ marginBottom: '20px' }}>State Product Data</h2>
          {tooltipContent && (
            <div style={{ position: 'absolute', top: `${tooltipPosition.y}px`, left: `${tooltipPosition.x}px`, padding: '10px', backgroundColor: 'rgba(27, 24, 25, 0.87)', border: '1px solid #ccc', zIndex: 1000, borderRadius: '10px', transform: 'translate(-300%, -210%)', fontSize: '16px', color: 'white' }}>
              {tooltipContent}
            </div>
          )}
          <ComposableMap
            projection="geoAlbersUsa"
            projectionConfig={{ scale: 1000 }}
            style={{ width: "100%", height: "100%" }}
          >
            <Geographies geography={usStatesTopo}>
              {({ geographies }) =>
                geographies.map(geo => {
                  const cur = stateProductData[geo.properties.STUSPS];
                  return (
                    <Geography
                      key={geo.rsmKey}
                      geography={geo}
                      fill={cur ? colorScale(cur) : "#EEE"}
                      onMouseEnter={(event) => {
                        const { STUSPS } = geo.properties;
                        setTooltipContent(`${STUSPS}: ${stateProductData[STUSPS] || 0}`);
                        setTooltipPosition({ x: event.clientX, y: event.clientY });
                      }}
                      onMouseLeave={() => {
                        setTooltipContent('');
                      }}
                    />
                  );
                })
              }
            </Geographies>
          </ComposableMap>
          <div style={{ display: 'flex', justifyContent: 'center', marginTop: '20px' }}>
            {colorScale.range().map((color, index) => (
              <div key={index} style={{ display: 'flex', alignItems: 'center', marginRight: '20px' }}>
                <div style={{ width: '20px', height: '20px', backgroundColor: color, marginRight: '10px' }} />
                <span>{index * 20}-{(index + 1) * 20}</span>
              </div>
            ))}
          </div>
        </div>
      </div>

      {/* Doughnut Chart */}
      <div style={{ boxShadow: '0 4px 8px rgba(0, 0, 0, 0.1)', padding: '20px', borderRadius: '8px', display: 'flex', flexDirection: 'column', justifyContent: 'center', alignItems: 'center' }}>
        <div style={{ width: '100%', height: '100%' }}>
          <Doughnut data={genderData} options={genderOptions} />
        </div>
      </div>
    </div>
  );
};

export default Dashboard;
